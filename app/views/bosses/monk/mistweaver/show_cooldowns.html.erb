<div class="container">
  <%= render 'bosses/shared/header', tab: 'cooldowns' %>
  <% max_sheilun = @fps.map{|fp| (fp.cooldowns_hash[:sheilun_healing].to_i + fp.cooldowns_hash[:sheilun_overhealing].to_i) / fp.fight_time}.max.to_i %>
  <%= render 'bosses/shared/section', 
    {
      title: 'Sheilun\'s Gift Effectiveness',
      desc: 'The total amount of healing provided by Sheilun\'s Gift.',
      sub_bars: @fps.map{|fp| 
        {
          fp: fp,
          white_bar: true,
          white_bar_width: bar_width((fp.cooldowns_hash[:sheilun_healing].to_i + fp.cooldowns_hash[:sheilun_overhealing].to_i) / fp.fight_time, max_sheilun),
          main_bar_width: bar_width(fp.cooldowns_hash[:sheilun_healing].to_i, fp.cooldowns_hash[:sheilun_healing].to_i + fp.cooldowns_hash[:sheilun_overhealing].to_i),
          main_bar_text: "#{fp.cooldowns_hash[:sheilun_healing].to_i / fp.fight_time}/sec",
          main_text: "#{fp.cooldowns_hash[:sheilun_healing].to_i / fp.fight_time} healing, #{fp.cooldowns_hash[:sheilun_overhealing].to_i / fp.fight_time} overhealing per second",
        }
      }
    } 
  %>
  <% max_cocoon = @fps.map{|fp| (fp.cooldowns_hash[:cocoon_absorb].to_i + fp.cooldowns_hash[:cocoon_healing].to_i + fp.cooldowns_hash[:cocoon_overhealing].to_i) / fp.fight_time}.max.to_i %>
  <%= render 'bosses/shared/section', 
    {
      title: 'Life Cocoon Effectiveness',
      desc: 'The total amount of healing and absorption provided by Enveloping Mist. This shows the absorb shield from Life Cocoon, as well as the 50% healing increase while it is active. Increased healing is shown on bars as a lighter color.',
      sub_bars: @fps.map{|fp| 
        {
          fp: fp,
          white_bar: true,
          white_bar_width: bar_width((fp.cooldowns_hash[:cocoon_absorb].to_i + fp.cooldowns_hash[:cocoon_healing].to_i + fp.cooldowns_hash[:cocoon_overhealing].to_i) / fp.fight_time, max_cocoon),
          light_bar_width: bar_width(fp.cooldowns_hash[:cocoon_absorb].to_i + fp.cooldowns_hash[:cocoon_healing].to_i, fp.cooldowns_hash[:cocoon_absorb].to_i + fp.cooldowns_hash[:cocoon_healing].to_i + fp.cooldowns_hash[:cocoon_overhealing].to_i), 
          main_bar_width: bar_width(fp.cooldowns_hash[:cocoon_absorb].to_i, fp.cooldowns_hash[:cocoon_absorb].to_i + fp.cooldowns_hash[:cocoon_healing].to_i),
          main_bar_text: "#{(fp.cooldowns_hash[:cocoon_absorb].to_i + fp.cooldowns_hash[:cocoon_healing].to_i) / fp.fight_time}/sec",
          main_text: "#{(fp.cooldowns_hash[:cocoon_absorb].to_i + fp.cooldowns_hash[:cocoon_healing].to_i) / fp.fight_time} healing, #{fp.cooldowns_hash[:cocoon_overhealing].to_i / fp.fight_time} overhealing per second",
        }
      }
    } 
  %>
  <% max_revival = @fps.map{|fp| (fp.cooldowns_hash[:revival_healing].to_i + fp.cooldowns_hash[:revival_overhealing].to_i) / fp.fight_time}.max.to_i %>
  <%= render 'bosses/shared/section', 
    {
      title: 'Revival Effectiveness',
      desc: 'The total amount of healing provided by Revival.',
      sub_bars: @fps.map{|fp| 
        {
          fp: fp,
          white_bar: true,
          white_bar_width: bar_width((fp.cooldowns_hash[:revival_healing].to_i + fp.cooldowns_hash[:revival_overhealing].to_i) / fp.fight_time, max_revival),
          main_bar_width: bar_width(fp.cooldowns_hash[:revival_healing].to_i, fp.cooldowns_hash[:revival_healing].to_i + fp.cooldowns_hash[:revival_overhealing].to_i),
          main_bar_text: "#{fp.cooldowns_hash[:revival_healing].to_i / fp.fight_time}/sec",
          main_text: "#{fp.cooldowns_hash[:revival_healing].to_i / fp.fight_time} healing, #{fp.cooldowns_hash[:revival_overhealing].to_i / fp.fight_time} overhealing per second",
        }
      }
    } 
  %>
  <% max_essence = @fps.map{|fp| (fp.cooldowns_hash[:essence_healing].to_i + fp.cooldowns_hash[:essence_overhealing].to_i) / fp.fight_time}.max.to_i %>
  <%= render 'bosses/shared/section', 
    {
      title: 'Essence Font Effectiveness',
      desc: 'The total amount of healing provided by Essence Font.',
      sub_bars: @fps.map{|fp| 
        {
          fp: fp,
          white_bar: true,
          white_bar_width: bar_width((fp.cooldowns_hash[:essence_healing].to_i + fp.cooldowns_hash[:essence_overhealing].to_i) / fp.fight_time, max_essence),
          main_bar_width: bar_width(fp.cooldowns_hash[:essence_healing].to_i, fp.cooldowns_hash[:essence_healing].to_i + fp.cooldowns_hash[:essence_overhealing].to_i),
          main_bar_text: "#{fp.cooldowns_hash[:essence_healing].to_i / fp.fight_time}",
          main_text: "#{fp.cooldowns_hash[:essence_healing].to_i / fp.fight_time} healing, #{fp.cooldowns_hash[:essence_overhealing].to_i / fp.fight_time} overhealing per second",
        }
      }
    } 
  %>
  <% max_mastery = @fps.map{|fp| (fp.cooldowns_hash[:essence_mastery_healing].to_i + fp.cooldowns_hash[:essence_mastery_overhealing].to_i) / fp.fight_time}.max.to_i %>
  <%= render 'bosses/shared/section', 
    {
      title: 'Essence Font: Mastery',
      desc: 'Targets affected by Essence Font will be healed by your Mastery twice. This shows the effectiveness of the increased Mastery on affected targets. Any Mastery overhealing will show that you wasted mana.',
      sub_bars: @fps.map{|fp| 
        {
          fp: fp,
          white_bar: true,
          white_bar_width: bar_width((fp.cooldowns_hash[:essence_mastery_healing].to_i + fp.cooldowns_hash[:essence_mastery_overhealing].to_i) / fp.fight_time, max_mastery),
          main_bar_width: bar_width(fp.cooldowns_hash[:essence_mastery_healing].to_i, fp.cooldowns_hash[:essence_mastery_healing].to_i + fp.cooldowns_hash[:essence_mastery_overhealing].to_i),
          main_bar_text: "#{fp.cooldowns_hash[:essence_mastery_healing].to_i / fp.fight_time}",
          main_text: "#{fp.cooldowns_hash[:essence_mastery_healing].to_i / fp.fight_time} healing, #{fp.cooldowns_hash[:essence_mastery_overhealing].to_i / fp.fight_time} overhealing per second",
        }
      }
    } 
  %>
  <% if (max_rjw = @fps.map{|fp| (fp.cooldowns_hash[:rjw_healing].to_i + fp.cooldowns_hash[:rjw_overhealing].to_i) / fp.fight_time}.max.to_i) > 0 %>
    <%= render 'bosses/shared/section', 
      {
        title: 'Refreshing Jade Wind Effectiveness',
        desc: 'The total amount of healing provided by Refreshing Jade Wind.',
        sub_bars: @fps.reject{|fp| fp.talent(5) != 'Refreshing Jade Wind' }.map{|fp| 
          {
            fp: fp,
            white_bar: true,
            white_bar_width: bar_width((fp.cooldowns_hash[:rjw_healing].to_i + fp.cooldowns_hash[:rjw_overhealing].to_i) / fp.fight_time, max_rjw),
            main_bar_width: bar_width(fp.cooldowns_hash[:rjw_healing].to_i, fp.cooldowns_hash[:rjw_healing].to_i + fp.cooldowns_hash[:rjw_overhealing].to_i),
            main_bar_text: "#{fp.cooldowns_hash[:rjw_healing].to_i / fp.fight_time}",
            main_text: "#{fp.cooldowns_hash[:rjw_healing].to_i / fp.fight_time} healing, #{fp.cooldowns_hash[:rjw_overhealing].to_i / fp.fight_time} overhealing per second",
          }
        }
      } 
    %>
  <% end %>
  <% if (max_chiji = @fps.map{|fp| (fp.cooldowns_hash[:chiji_healing].to_i + fp.cooldowns_hash[:chiji_overhealing].to_i) / fp.fight_time}.max.to_i) > 0 %>
    <%= render 'bosses/shared/section', 
      {
        title: 'Chi-Ji Effectiveness',
        desc: 'The total amount of healing provided by Chi-Ji.',
        sub_bars: @fps.reject{|fp| fp.talent(5) != 'Invoke Chi-Ji, the Red Crane' }.map{|fp| 
          {
            fp: fp,
            white_bar: true,
            white_bar_width: bar_width((fp.cooldowns_hash[:chiji_healing].to_i + fp.cooldowns_hash[:chiji_overhealing].to_i) / fp.fight_time, max_chiji),
            main_bar_width: bar_width(fp.cooldowns_hash[:chiji_healing].to_i, fp.cooldowns_hash[:chiji_healing].to_i + fp.cooldowns_hash[:chiji_overhealing].to_i),
            main_bar_text: "#{fp.cooldowns_hash[:chiji_healing].to_i / fp.fight_time}",
            main_text: "#{fp.cooldowns_hash[:chiji_healing].to_i / fp.fight_time} healing, #{fp.cooldowns_hash[:chiji_overhealing].to_i / fp.fight_time} overhealing per second",
          }
        }
      } 
    %>
  <% end %>
</div>
<%= render 'bosses/shared/footer', tab: 'basic' %>
